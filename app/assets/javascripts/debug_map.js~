function google_map() {
  map = new OpenLayers.Map({ div: 'debugMap', maxExtent: new OpenLayers.Bounds(
                           -20037508, -20037508, 20037508, 20037508.34)});

  var gphy = new OpenLayers.Layer.Google(
    "Google Physical",
    {type: google.maps.MapTypeId.TERRAIN}
  );
  var gmap = new OpenLayers.Layer.Google(
    "Google Streets", // the default
    {numZoomLevels: 20}
  );
  var ghyb = new OpenLayers.Layer.Google(
    "Google Hybrid",
    {type: google.maps.MapTypeId.HYBRID, numZoomLevels: 20}
  );
  var gsat = new OpenLayers.Layer.Google(
    "Google Satellite",
    {type: google.maps.MapTypeId.SATELLITE, numZoomLevels: 22}
  );

  map.addLayers([gphy, gmap, ghyb, gsat]);
  return map;
}

function osm_map() {
  map = new OpenLayers.Map("debugMap");
  var mapnik         = new OpenLayers.Layer.OSM();
  map.addLayer(mapnik);
  return map;
}

function debug_map(json, use_osm, spots) {

  if (use_osm == true) {
    map = osm_map();
  } else {
    map = google_map();
  }

  var fromProjection = new OpenLayers.Projection("EPSG:4326");   // Transform from WGS 1984
  var toProjection   = new OpenLayers.Projection("EPSG:900913"); // to Spherical Mercator Projection
  var center         = new OpenLayers.LonLat(139.71,35.62).transform( fromProjection, toProjection);
  var zoom           = 14;
  var current_coords = false;

  map.setCenter(center, zoom );
  map.displayProjection = fromProjection; // so units on mouseover are fine

  map.addControl(new OpenLayers.Control.LayerSwitcher( {title: 'Switch/add/remove layers'}));
  map.addControl(new OpenLayers.Control.PanZoomBar());
  map.addControl(new OpenLayers.Control.MousePosition());
  map.addControl(new OpenLayers.Control.KeyboardDefaults());

  var featurec = {
    "type": "Feature",
    "properties": {
    },
    "geometry": json,
    "crs": {
      "type": "name",
      "properties": {
        "name": "urn:ogc:def:crs:OGC:1.3:CRS84"
      }
    }
  }

  var route_style =  { style:  {
    strokeColor: "#FF0000",
    strokeOpacity: 0.7,
    strokeWidth: 6
  }};

  var geojson_format = new OpenLayers.Format.GeoJSON({
    'internalProjection': toProjection,
    'externalProjection': fromProjection
  });

  var features = geojson_format.read(featurec);

  var vector_layer = new OpenLayers.Layer.Vector("Routes", route_style);
  vector_layer.addFeatures(features);
  map.addLayer(vector_layer);
  
 
  ////////////////////
  //  Display spot info on the map
  ///////////////////
  for (var i=0; i<(spots.length)/2; i++) {
  debugger
  features[i] = new OpenLayers.Feature.Vector(
      new OpenLayers.Geometry.Point(spots[i*2],spots[i*2+1]).transform( fromProjection, toProjection), {
          type: i
      }
   );
}
  /**
   * Create a style instance that is a collection of rules with symbolizers.
   * Use a default symbolizer to extend symoblizers for all rules.
   */
  var style = new OpenLayers.Style({
    fillColor: "#ffcc66",
    strokeColor: "#ff9933",
    strokeWidth: 2,
    label: "${type}",
    fontColor: "#333333",
    fontFamily: "sans-serif",
    fontWeight: "bold"
  });

  // Create a vector layer and give it your style map.
  var points = new OpenLayers.Layer.Vector("Points", {
    styleMap: new OpenLayers.StyleMap(style)
  });
  points.addFeatures(features);
  map.addLayer(points);



  var content = ""
  $.each(json.coordinates, function(i,data){
    content += '<p>' + data + '</p>';
  });
  $("#coordinates").append(content);

  $("#center_map").on("click", function() {
    if (current_coords) {
      center = new OpenLayers.LonLat(current_coords.longitude, current_coords.latitude).transform( fromProjection, toProjection);
      //center = new OpenLayers.LonLat(100, 12).transform( fromProjection, toProjection);
      map.setCenter(center, zoom );
    }
  });

  navigator.geolocation.getCurrentPosition(position_acquired, position_error);

  function position_acquired(position) {
    $("#current_location_title").show();
    content = "";
    var coords = position.coords;
    current_coords = coords; //used in center_map
    content="Latitude: " + coords.latitude + "   Longitude: " + coords.longitude;
    $("#current_location").append(content);
  }

  function position_error(error) {
    $("#current_location_title").hide();
  }
}
